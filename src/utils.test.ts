import {
  area,
  isCcw,
  within,
  intersection,
  selfintersection,
  getCrs,
  hasSingularity,
  overlapping,
  enclosing,
} from "./utils";
import { InvalidCodeError } from "./errors";

it("area", () => {
  expect(
    area([
      [-10, -10],
      [10, -10],
      [10, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBe(400);
  expect(
    area([
      [-10, -10],
      [-10, 10],
      [10, 10],
      [10, -10],
      [-10, -10],
    ])
  ).toBe(400);
  expect(
    area([
      [0, 0],
      [6, 0],
      [3, 4],
      [0, 0],
    ])
  ).toBe(12);
});

it("isCcw", () => {
  expect(
    isCcw([
      [-10, -10],
      [10, -10],
      [10, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeTruthy();
  expect(
    isCcw([
      [-10, -10],
      [-10, 10],
      [10, 10],
      [10, -10],
      [-10, -10],
    ])
  ).toBeFalsy();
  expect(
    isCcw([
      [170, -10],
      [-170, -10],
      [-170, 10],
      [170, 10],
      [170, -10],
    ])
  ).toBeFalsy();
});

it("within", () => {
  expect(
    within(
      [0, 0],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ]
    )
  ).toBeTruthy();

  expect(
    within(
      [0, 100],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ]
    )
  ).toBeFalsy();

  expect(
    within(
      [-10, -10],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ]
    )
  ).toBeFalsy();

  expect(
    within(
      [-10, -10],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ],
      {
        includeBorder: true,
      }
    )
  ).toBeTruthy();

  expect(
    within(
      [0, -10],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ]
    )
  ).toBeFalsy();

  expect(
    within(
      [0, -10],
      [
        [-10, -10],
        [10, -10],
        [10, 10],
        [-10, 10],
        [-10, -10],
      ],
      {
        includeBorder: true,
      }
    )
  ).toBeTruthy();

  expect(
    within(
      [0, 0],
      [
        [170, -10],
        [-170, -10],
        [-170, 10],
        [170, 10],
        [170, -10],
      ]
    )
  ).toBeTruthy();

  expect(
    within(
      [180, 0],
      [
        [170, -10],
        [-170, -10],
        [-170, 10],
        [170, 10],
        [170, -10],
      ]
    )
  ).toBeFalsy();

  expect(
    within(
      [-180, 0],
      [
        [170, -10],
        [-170, -10],
        [-170, 10],
        [170, 10],
        [170, -10],
      ]
    )
  ).toBeFalsy();
});

it("intersection", () => {
  expect(intersection([0, 0], [10, 10], [1, 8], [9, 2])).toBeTruthy();

  expect(intersection([0, 0], [10, 10], [1, 8], [-9, 2])).toBeFalsy();

  expect(intersection([0, 0], [10, 10], [1, 8], [5, 5])).toBeTruthy();

  expect(intersection([0, 0], [10, 10], [1, 8], [4, 5])).toBeFalsy();

  expect(intersection([0, 0], [10, 10], [2, 2], [5, 5])).toBeTruthy();

  expect(intersection([0, 0], [10, 10], [-2, -2], [5, 5])).toBeTruthy();
});

it("selfintersection", () => {
  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [10, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeFalsy();

  expect(
    selfintersection([
      [-10, -10],
      [-10, 10],
      [10, 10],
      [10, -10],
      [-10, -10],
    ])
  ).toBeFalsy();

  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [10, 10],
      [0, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeFalsy();

  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [10, 10],
      [0, -10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeTruthy();

  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [20, -10],
      [-10, -10],
    ])
  ).toBeTruthy();

  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [-15, 0],
      [10, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeTruthy();

  expect(
    selfintersection([
      [-10, -10],
      [10, -10],
      [10, 10],
      [10, 10],
      [-10, 10],
      [-10, -10],
    ])
  ).toBeFalsy();
});

it("getCrs", () => {
  expect(getCrs(4326)).toBe("+proj=longlat +datum=WGS84 +no_defs +type=crs");
  expect(getCrs("EPSG:3031")).toBe(
    "+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs"
  );
  expect(getCrs("epsg:3031")).toBe(
    "+proj=stere +lat_0=-90 +lat_ts=-71 +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +type=crs"
  );
  expect(getCrs("epsg3031")).toBe("epsg3031");

  expect(() => {
    getCrs("epsg:1");
  }).toThrow(InvalidCodeError);
});

it("hasSingularity", () => {
  expect(
    hasSingularity([
      [10, 10],
      [NaN, 1],
    ])
  ).toBeTruthy();
  expect(
    hasSingularity([
      [10, 10],
      [0, 1],
    ])
  ).toBeFalsy();
  expect(
    hasSingularity([
      [Infinity, 10],
      [0, 1],
    ])
  ).toBeTruthy();
  expect(
    hasSingularity([
      [-100, -Infinity],
      [0, 1],
    ])
  ).toBeTruthy();
});

it("overlapping", () => {
  expect(
    overlapping(
      [
        [175.0, 1.0],
        [190.0, 1.0],
        [190.0, 10.0],
        [175.0, 10.0],
        [175.0, 1.0],
      ],
      [
        [170.0, 0.0],
        [180.0, 0.0],
        [180.0, 5.0],
        [170.0, 5.0],
        [170.0, 0.0],
      ]
    )
  ).toBeTruthy();
  expect(
    overlapping(
      [
        [180.0, 5.0],
        [185.0, 5.0],
        [185.0, 10.0],
        [180.0, 10.0],
        [180.0, 5.0],
      ],
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ]
    )
  ).toBeTruthy();
  expect(
    overlapping(
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ],
      [
        [70.0, 0.0],
        [80.0, 0.0],
        [80.0, 5.0],
        [70.0, 5.0],
        [70.0, 0.0],
      ]
    )
  ).toBeFalsy();
  expect(
    overlapping(
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ],
      [
        [160.0, -10.0],
        [170.0, -10.0],
        [170.0, 0.0],
        [160.0, 0.0],
        [160.0, -10.0],
      ]
    )
  ).toBeTruthy();
  expect(
    overlapping(
      [
        [-166.29735608331535, 65.2675736051543],
        [-172.6023497127709, 59.64185307342112],
        [-189.48921580545277, 58.75362766039092],
        [-172.49634881250233, 53.47332870711972],
        [-177.1325363659081, 43.137414020654376],
        [-163.1169428371605, 49.998994843236034],
        [-145.06260771982042, 43.17592840580443],
        [-152.07724948160023, 53.65924395215495],
        [-143.89719863168568, 60.33345330000762],
        [-160.97407241098256, 60.14663197973783],
        [-166.29735608331535, 65.2675736051543],
      ],
      [
        [-170.81849714367317, 50.675753802410455],
        [-153.9196900435318, 52.390244790747275],
        [-153.9196900435318, 58.39624886309962],
        [-173.55089890022404, 57.98511245909557],
        [-170.81849714367317, 50.675753802410455],
      ]
    )
  ).toBeTruthy();
});

it("enclosing", () => {
  expect(
    enclosing(
      [
        [180.0, 5.0],
        [185.0, 5.0],
        [185.0, 10.0],
        [180.0, 10.0],
        [180.0, 5.0],
      ],
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ]
    )
  ).toBeTruthy();
  expect(
    enclosing(
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ],
      [
        [180.0, 5.0],
        [185.0, 5.0],
        [185.0, 10.0],
        [180.0, 10.0],
        [180.0, 5.0],
      ]
    )
  ).toBeFalsy();
  expect(
    enclosing(
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ],
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ]
    )
  ).toBeTruthy();
  expect(
    enclosing(
      [
        [160.0, -10.0],
        [170.0, -10.0],
        [170.0, 0.0],
        [160.0, 0.0],
        [160.0, -10.0],
      ],
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ]
    )
  ).toBeFalsy();
  expect(
    enclosing(
      [
        [0.0, 0.0],
        [10.0, 0.0],
        [10.0, 10.0],
        [0.0, 10.0],
        [0.0, 0.0],
      ],
      [
        [170.0, 0.0],
        [190.0, 0.0],
        [190.0, 10.0],
        [170.0, 10.0],
        [170.0, 0.0],
      ]
    )
  ).toBeFalsy();
});
